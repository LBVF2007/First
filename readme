GIT

https://git-scm.com/downloads - клиент git 

git - данная команда выводит список доступных команд, а для нас сейчас просто служит подтверждением, что пункт 2 сделан правильно и GIT работает

git config --global user.name "Ivan Ivanov" - указать ваше имя. 
git config --global user.email IvanIvanov@example.com -  указать ваш адрес электронной почты.
cd: C:/Users/Ivanov/IdeaProjects/Project1 - этой командой вы переходите в нужную Вам папку, которую на следующем шаге будете делать локальным хранилищем (т.е это ваша рабочая папка, в которой будут храниться все изменения проекта)
git init - Создать репозиторий в текущей директории
git add . - данная команда индексирует (проверяет и запоминает) все файлы (точка в конце команды), которые в последущем будут подвержены коммиту (по сути сохранены).
git commit -m "Commit Text" - сохранение изменений в локальную папку.
 
 git clone /путь/к/репозиторию - Создать локальную рабочую копию репозитория
 git clone юзер@хост:/путь/к/репозиторию - если используется удаленный сервер
 
 git checkout -b feature_x - Создать новую ветку с названием "feature_x" и переключиться на неё можно командой
 git checkout master - переключиться обратно на master
 
 git branch -d feature_x - удалить ветку
 
 

Всё, локальный репозиторий создан, теперь нам нужно связать локальный и удаленнный (GITHUB созданный в пункте 1) репозитории. Для этого нам необходимо ввести следующие команды:

git remote add origin https://github.com/GithubUser/RepositiryName.git - где, https://github.com/GithubUser/RepositiryName.git адрес созданного Вами репозитория на GitHub, можно скопировать прямо из браузера с добавлением .git
 
git push -u origin master
Поздравляю, Вы связали удаленный и локальный репозитории.

Чтобы отправить файлы в удаленный репозиторий выполните команду:

 git push - после нажатия Enter, в первый раз вас попросят ввести имя пользователя GitHub и пароль.
 

Теперь Вы можете видеть на сайте GitHub произведенные изменения.

 

Обратите внимание, что после того, как вы произвели изменения с файлами, в нашем примере это сохранили проект в IDEA, Вам необходимо выполнить следующие команды:

git add . - данная команда индексирует (проверяет и запоминает) все файлы (точка в конце команды), которые в последущем будут подвержены коммиту (по сути сохранены).
git commit -m "Commit Text" - сохранение изменений в локальную папку.
Для передачи в удаленный репозиторий выполнить еще и эту команду: git push
 
Для того, чтобы, наоборот, получить информацию из удаленного репозитория в локальный репозиторий выполните команду: git pull
 
 git merge <имя_ветки> - слить другую ветку с активной
 
 git diff <имя_ветки> <имя_другой_ветки> - сравнить изменения
 
 git tag 1.0.0 1b2e1d63ff - Создать новую метку с именем 1.0.0 (1b2e1d63ff это первые десять цифр уникального идентификатора (id), с которым будет связана метка. )
 
git log (посмотреть идентификаторы коммитов)  
 
git checkout -- <имя_файла> - замена изменений в вашем рабочем каталоге, на то, что сейчас находится в HEAD
 
 удалить все ваши локальные изменения и коммиты, получите (fetch) последние изменения с сервера и укажите локальной ветке master на них вот так
git fetch origin
git reset --hard origin/master

твики и удобные команды:

git status — показывает состояние вашего репозитория (рабочей копии) и где вы находитесь.

gitk — графическая утилита, которая показывает наш граф. В качестве ключей передаём имена веток или --all, чтобы показать все.

использовать цветной вывод в терминале git config color.ui true

выводить в логе коммит на одной строке git config format.pretty oneline

интерактивный способ добавления в индекс git add -i

Обозначения:
index — область зафиксированных изменений, т.е. всё то, что вы подготовили к сохранению в репозиторий.
commit — изменения, отправленные в репозиторий.
HEAD — указатель на commit, в котором мы находимся.
master — имя ветки по-умолчанию, это тоже указатель на определённый коммит
origin — имя удалённого репозитория по умолчанию (можно дать другое)
checkout — взять из репозитория какое-либо его состояние.

______________________________________

Задание: Скачать проект, изменить и отправить обратно на сервер.

git clone (качиваем проект)
(делаем изменения)
git add . (индексируем (проверяет и запоминает) все файлы (точка в конце команды), которые в последущем будут подвержены коммиту)
git commit -m "Имя изменения" -a (сохр.изменения лок.папке)
git push origin master - (отправляем все на сервер. Или git push origin branch_name - конкретную ветку)

git pull (получить изменения с сервера)
git branch <branch_name> <commit_id> (делаем ответление, для этого надо узнать commit_id)


 
 