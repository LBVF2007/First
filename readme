GIT

https://git-scm.com/downloads - клиент git 

git - данная команда выводит список доступных команд, а для нас сейчас просто служит подтверждением, что пункт 2 сделан правильно и GIT работает

git config --global user.name "Ivan Ivanov" - указать ваше имя. 
git config --global user.email IvanIvanov@example.com -  указать ваш адрес электронной почты.
cd: C:/Users/Ivanov/IdeaProjects/Project1 - этой командой вы переходите в нужную Вам папку, которую на следующем шаге будете делать локальным хранилищем (т.е это ваша рабочая папка, в которой будут храниться все изменения проекта)
git init - Создать репозиторий в текущей директории
git add . - данная команда индексирует (проверяет и запоминает) все файлы (точка в конце команды), которые в последущем будут подвержены коммиту (по сути сохранены).
git commit -m "Commit Text" - сохранение изменений в локальную папку.
 
 git clone /путь/к/репозиторию - Создать локальную рабочую копию репозитория
 git clone юзер@хост:/путь/к/репозиторию - если используется удаленный сервер
 
 git checkout -b feature_x - Создать новую ветку с названием "feature_x" и переключиться на неё можно командой
 git checkout master - переключиться обратно на master
 
 git branch -d feature_x - удалить ветку
 
 

Всё, локальный репозиторий создан, теперь нам нужно связать локальный и удаленнный (GITHUB созданный в пункте 1) репозитории. Для этого нам необходимо ввести следующие команды:

git remote add origin https://github.com/GithubUser/RepositiryName.git - где, https://github.com/GithubUser/RepositiryName.git адрес созданного Вами репозитория на GitHub, можно скопировать прямо из браузера с добавлением .git
 
git push -u origin master
Поздравляю, Вы связали удаленный и локальный репозитории.

Чтобы отправить файлы в удаленный репозиторий выполните команду:

 git push - после нажатия Enter, в первый раз вас попросят ввести имя пользователя GitHub и пароль.
 

Теперь Вы можете видеть на сайте GitHub произведенные изменения.

 

Обратите внимание, что после того, как вы произвели изменения с файлами, в нашем примере это сохранили проект в IDEA, Вам необходимо выполнить следующие команды:

git add . - данная команда индексирует (проверяет и запоминает) все файлы (точка в конце команды), которые в последущем будут подвержены коммиту (по сути сохранены).
git commit -m "Commit Text" - сохранение изменений в локальную папку.
Для передачи в удаленный репозиторий выполнить еще и эту команду: git push
 
Для того, чтобы, наоборот, получить информацию из удаленного репозитория в локальный репозиторий выполните команду: git pull
 
 git merge <имя_ветки> - слить другую ветку с активной
 
 git diff <имя_ветки> <имя_другой_ветки> - сравнить изменения
 
 git tag 1.0.0 1b2e1d63ff - Создать новую метку с именем 1.0.0 (1b2e1d63ff это первые десять цифр уникального идентификатора (id), с которым будет связана метка. )
 
git log (посмотреть идентификаторы коммитов)  
 
git checkout -- <имя_файла> - замена изменений в вашем рабочем каталоге, на то, что сейчас находится в HEAD
 
 удалить все ваши локальные изменения и коммиты, получите (fetch) последние изменения с сервера и укажите локальной ветке master на них вот так
git fetch origin
git reset --hard origin/master

твики и удобные команды:

git status — показывает состояние вашего репозитория (рабочей копии) и где вы находитесь.

gitk — графическая утилита, которая показывает наш граф. В качестве ключей передаём имена веток или --all, чтобы показать все.

использовать цветной вывод в терминале git config color.ui true

выводить в логе коммит на одной строке git config format.pretty oneline

интерактивный способ добавления в индекс git add -i

Обозначения:
index — область зафиксированных изменений, т.е. всё то, что вы подготовили к сохранению в репозиторий.
commit — изменения, отправленные в репозиторий.
HEAD — указатель на commit, в котором мы находимся.
master — имя ветки по-умолчанию, это тоже указатель на определённый коммит
origin — имя удалённого репозитория по умолчанию (можно дать другое)
checkout — взять из репозитория какое-либо его состояние.

______________________________________

Задание: Скачать проект, изменить и отправить обратно на сервер.

git clone (качиваем проект)
(делаем изменения)
git add . (индексируем (проверяет и запоминает) все файлы (точка в конце команды), которые в последущем будут подвержены коммиту)
git commit -m "Имя изменения" -a (сохр.изменения лок.папке)
git tag (задание имя изменениям или указать версию)
git push origin master - (отправляем все на сервер. Или git push origin branch_name - конкретную ветку)

git pull (получить изменения с сервера)
git branch <branch_name> <commit_id> (делаем ответление, для этого надо узнать commit_id)

______________________________________

обычное исправление багов может быть осуществлено по следующему простому алгоритму:

Исправление в ветке dev или отдельной
Получение изменений из origin (git fetch origin)
Перестройка изменений на последнюю версию (git rebase -i origin/dev)
Передача изменений в origin (git push origin dev)

_______________________________________

Первоначальная настройка
Настройка информации о пользователе для всех локальных репозиториев

$ git config --global user.name "[имя]"

Устанавливает имя, которое будет отображаться в поле автора у выполняемых вами коммитов

$ git config --global user.email "[адрес электронной почты]"

Устанавливает адрес электронной почты, который будет отображаться в информации о выполняемых вами коммитах

Создание репозитория
Создание нового репозитория или получение его по существующему URL-адресу

$ git init [название проекта]

Создаёт новый локальный репозиторий с заданным именем

$ git clone [url-адрес]

Скачивает репозиторий вместе со всей его историей изменений

Внесение изменений
Просмотр изменений и создание коммитов (фиксация изменений)

$ git status

Перечисляет все новые или изменённые файлы, которые нуждаются в фиксации

$ git diff

Показывает различия по внесённым изменениям в ещё не проиндексированных файлах

$ git add [файл]

Индексирует указанный файл для последующего коммита

$ git diff --staged

Показывает различия между проиндексированной и последней зафиксированной версиями файлов

$ git reset [файл]

Отменяет индексацию указанного файла, при этом сохраняет его содержимое

$ git commit -m "[сообщение с описанием]"

Фиксирует проиндексированные изменения и сохраняет их в историю версий

Коллективная работа
Именованные серии коммитов и соединение результатов работы

$ git branch

Список именованных веток коммитов с указанием выбранной ветки

$ git branch [имя ветки]

Создаёт новую ветку

$ git checkout [имя ветки]

Переключается на выбранную ветку и обновляет рабочую директорию до её состояния

$ git merge [имя ветки]

Вносит изменения указанной ветки в текущую ветку

$ git branch -d [имя ветки]

Удаляет выбранную ветку

Операции с файлами
Перемещение и удаление версий файлов репозитория

$ git rm [файл]

Удаляет конкретный файл из рабочей директории и индексирует его удаление

$ git rm --cached [файл]

Убирает конкретный файл из контроля версий, но физически оставляет его на своём месте

$ git mv [оригинальный файл] [новое имя]

Перемещает и переименовывает указанный файл, сразу индексируя его для последующего коммита

Игнорирование некоторых файлов
Исключение временных и вторичных файлов и директорий

*.log
build/
temp-*
Git будет игнорировать файлы и директории, перечисленные в файле .gitignore с помощью wildcard синтаксиса

$ git ls-files --others --ignored --exclude-standard

Список всех игнорируемых файлов в текущем проекте

Сохранение фрагментов
Сохранение и восстановление незавершённых изменений

$ git stash

Временно сохраняет все незафиксированные изменения отслеживаемых файлов

$ git stash pop

Восстанавливает состояние ранее сохранённых версий файлов

$ git stash list

Выводит список всех временных сохранений

$ git stash drop

Сбрасывает последние временно сохранённыe изменения

Просмотр истории
Просмотр и изучение истории изменений файлов проекта

$ git log

История коммитов для текущей ветки

$ git log --follow [файл]

История изменений конкретного файла, включая его переименование

$ git diff [первая ветка]...[вторая ветка]

Показывает разницу между содержанием коммитов двух веток

$ git show [коммит]

Выводит информацию и показывает изменения в выбранном коммите

Откат коммитов
Удаление ошибок и корректировка созданной истории

$ git reset [коммит]

Отменяет все коммиты после заданного, оставляя все изменения в рабочей директории

$ git reset --hard [коммит]

Сбрасывает всю историю вместе с состоянием рабочей директории до указанного коммита.

Синхронизация с удалённым репозиторием
Регистрация удалённого репозитория и обмен изменениями

$ git fetch [удалённый репозиторий]

Скачивает всю историю из удалённого репозитория

$ git merge [удалённый репозиторий]/[ветка]

Вносит изменения из ветки удалённого репозитория в текущую ветку локального репозитория

$ git push [удалённый репозиторий] [ветка]

Загружает все изменения локальной ветки в удалённый репозиторий

$ git pull

Загружает историю из удалённого репозитория и объединяет её с локальной. pull = fetch + merge

 
 